// Autogenerated from Pigeon (v10.1.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

/// Flutter call Native
class TakePhotoHostApi {
  /// Constructor for [TakePhotoHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  TakePhotoHostApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = StandardMessageCodec();

  Future<Uint8List?> takeCardPhoto(bool arg_isBack) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.dh_native_photo.TakePhotoHostApi.takeCardPhoto', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_isBack]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return (replyList[0] as Uint8List?);
    }
  }

  Future<Uint8List?> takeSelfPhoto(bool arg_isHand) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.dh_native_photo.TakePhotoHostApi.takeSelfPhoto', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_isHand]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return (replyList[0] as Uint8List?);
    }
  }
}

/// Native call Flutter
abstract class TakePhotoFlutterApi {
  static const MessageCodec<Object?> codec = StandardMessageCodec();

  void onTakeCardPhoto(bool isBack, Uint8List? data);

  void onTakeSelfPhoto(bool isHand, Uint8List? data);

  static void setup(TakePhotoFlutterApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.dh_native_photo.TakePhotoFlutterApi.onTakeCardPhoto', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.dh_native_photo.TakePhotoFlutterApi.onTakeCardPhoto was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final bool? arg_isBack = (args[0] as bool?);
          assert(arg_isBack != null,
              'Argument for dev.flutter.pigeon.dh_native_photo.TakePhotoFlutterApi.onTakeCardPhoto was null, expected non-null bool.');
          final Uint8List? arg_data = (args[1] as Uint8List?);
          api.onTakeCardPhoto(arg_isBack!, arg_data);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.dh_native_photo.TakePhotoFlutterApi.onTakeSelfPhoto', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.dh_native_photo.TakePhotoFlutterApi.onTakeSelfPhoto was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final bool? arg_isHand = (args[0] as bool?);
          assert(arg_isHand != null,
              'Argument for dev.flutter.pigeon.dh_native_photo.TakePhotoFlutterApi.onTakeSelfPhoto was null, expected non-null bool.');
          final Uint8List? arg_data = (args[1] as Uint8List?);
          api.onTakeSelfPhoto(arg_isHand!, arg_data);
          return;
        });
      }
    }
  }
}
